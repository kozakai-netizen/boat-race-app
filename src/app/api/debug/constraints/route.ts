import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase'

/**
 * „ÉÜ„Éº„Éñ„É´Âà∂Á¥ÑÁ¢∫Ë™çÁî®„Éá„Éê„ÉÉ„Ç∞API
 * GET /api/debug/constraints?table=racer_data
 * GET /api/debug/constraints?sql=custom (for custom SQL queries)
 */
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url)
    const tableName = searchParams.get('table') || 'racer_data'
    const queryType = searchParams.get('query') || 'constraints'

    console.log(`üîç [Debug] Running query type: ${queryType} for table: ${tableName}`)

    const supabase = createClient()

    // 2025Âπ¥ÂâçÊúü„Éá„Éº„ÇøÁ¢∫Ë™ç„ÅÆÁâπÂà•„ÇØ„Ç®„É™
    if (queryType === 'check_2025') {
      console.log('üéØ [Debug] Checking for 2025Âπ¥ÂâçÊúü data...')

      const { data: data2025, error: error2025 } = await supabase
        .from('racer_data')
        .select('racer_number, racer_name, period_year, period_half')
        .eq('period_year', 2025)
        .limit(10)

      if (error2025) {
        return NextResponse.json({
          success: false,
          error: '2025_data_check_failed',
          details: error2025.message
        }, { status: 500 })
      }

      return NextResponse.json({
        success: true,
        query_type: 'check_2025',
        result: data2025 || [],
        count: data2025?.length || 0,
        conclusion: data2025?.length === 0
          ? '‚úÖ No 2025 data found - This confirms no duplicate constraint violation'
          : '‚ùå 2025 data exists - This is the cause of the constraint violation',
        timestamp: new Date().toISOString()
      })
    }

    // 2025Âπ¥ÂâçÊúü„Éá„Éº„ÇøÂâäÈô§„ÇØ„Ç®„É™
    if (queryType === 'delete_2025') {
      console.log('üóëÔ∏è [Debug] Deleting 2025Âπ¥ÂâçÊúü data...')

      const { error: deleteError } = await supabase
        .from('racer_data')
        .delete()
        .eq('period_year', 2025)
        .eq('period_half', 'ÂâçÊúü')

      if (deleteError) {
        return NextResponse.json({
          success: false,
          error: '2025_data_delete_failed',
          details: deleteError.message
        }, { status: 500 })
      }

      return NextResponse.json({
        success: true,
        query_type: 'delete_2025',
        message: '‚úÖ 2025Âπ¥ÂâçÊúü„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü',
        next_step: 'count_2025„ÇØ„Ç®„É™„ÅßÂâäÈô§Á¢∫Ë™ç„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
        timestamp: new Date().toISOString()
      })
    }

    // 2025Âπ¥„Éá„Éº„Çø„Ç´„Ç¶„É≥„ÉàÁ¢∫Ë™ç
    if (queryType === 'count_2025') {
      console.log('üìä [Debug] Counting remaining 2025 data...')

      const { count, error: countError } = await supabase
        .from('racer_data')
        .select('*', { count: 'exact', head: true })
        .eq('period_year', 2025)

      if (countError) {
        return NextResponse.json({
          success: false,
          error: '2025_count_failed',
          details: countError.message
        }, { status: 500 })
      }

      return NextResponse.json({
        success: true,
        query_type: 'count_2025',
        count: count || 0,
        conclusion: count === 0
          ? '‚úÖ 2025Âπ¥„Éá„Éº„Çø„ÅåÂÆåÂÖ®„Å´ÂâäÈô§„Åï„Çå„Åæ„Åó„Åü„ÄÇCSV„Ç§„É≥„Éù„Éº„Éà„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ'
          : `‚ùå „Åæ„Å†${count}‰ª∂„ÅÆ2025Âπ¥„Éá„Éº„Çø„ÅåÊÆã„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ`,
        timestamp: new Date().toISOString()
      })
    }

    // GeminiÊèêÊ°àA-1„ÅÆSQL„ÇØ„Ç®„É™„ÇíÂÆüË°å
    const { data: constraints, error } = await supabase.rpc('sql', {
      query: `
        SELECT
          tc.constraint_name,
          tc.constraint_type,
          kcu.column_name
        FROM information_schema.table_constraints tc
        JOIN information_schema.key_column_usage kcu
          ON tc.constraint_name = kcu.constraint_name
        WHERE tc.table_schema = 'public'
          AND tc.table_name = '${tableName}';
      `
    })

    if (error) {
      console.error('‚ùå [Debug] SQL query failed:', error)

      // ‰ª£ÊõøÊñπÊ≥ï: Supabase„ÅÆ„É°„Çø„Éá„Éº„Çø„Åã„ÇâÊé®Ê∏¨
      const { data: tableInfo, error: tableError } = await supabase
        .from(tableName)
        .select('*')
        .limit(1)

      if (tableError) {
        return NextResponse.json({
          success: false,
          error: 'table_access_failed',
          details: tableError.message,
          table: tableName
        }, { status: 500 })
      }

      // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„ÅßÂà∂Á¥Ñ„ÇíÊé®Ê∏¨
      const { data: duplicateCheck, error: dupError } = await supabase
        .from(tableName)
        .select('racer_number, period_year, period_half')
        .limit(1000)

      let constraints_analysis = {
        primary_key: 'id (UUID - confirmed from sample)',
        unique_constraints: 'Unknown',
        check_constraints: 'Unknown'
      }

      if (!dupError && duplicateCheck) {
        // racer_number + period „ÅÆÁµÑ„ÅøÂêà„Çè„ÅõÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
        const combinations = duplicateCheck.map(row =>
          `${row.racer_number}-${row.period_year}-${row.period_half}`
        )
        const uniqueCombinations = new Set(combinations)

        constraints_analysis.unique_constraints =
          combinations.length === uniqueCombinations.size
            ? 'Likely UNIQUE(racer_number, period_year, period_half)'
            : 'No unique constraint on racer_number + period'
      }

      return NextResponse.json({
        success: true,
        method: 'fallback_with_analysis',
        table: tableName,
        note: 'Direct SQL query failed, analyzed data structure',
        sample_data: tableInfo?.[0] || null,
        constraints_analysis,
        total_records_analyzed: duplicateCheck?.length || 0
      })
    }

    console.log(`‚úÖ [Debug] Found ${constraints?.length || 0} constraints`)

    return NextResponse.json({
      success: true,
      method: 'direct_sql',
      table: tableName,
      constraints: constraints || [],
      count: constraints?.length || 0,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    console.error('‚ùå [Debug] Constraints check failed:', errorMessage)

    return NextResponse.json({
      success: false,
      error: 'constraint_check_failed',
      details: errorMessage
    }, { status: 500 })
  }
}